////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : counter.vf
// /___/   /\     Timestamp : 10/20/2019 22:23:16
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/AllLab/Lab6/counter.vf -w C:/AllLab/Lab6/counter.sch
//Design Name: counter
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_counter(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module counter(CLK, 
               CLR, 
               Q1_1, 
               Q1_2, 
               Q1_3, 
               Q1_4, 
               Q2_1, 
               Q2_2, 
               Q2_3, 
               Q2_4);

    input CLK;
    input CLR;
   output Q1_1;
   output Q1_2;
   output Q1_3;
   output Q1_4;
   output Q2_1;
   output Q2_2;
   output Q2_3;
   output Q2_4;
   
   wire XLXN_1;
   wire XLXN_4;
   
   VCC  XLXI_3 (.P(XLXN_1));
   (* HU_SET = "XLXI_4_0" *) 
   CD4CE_HXILINX_counter  XLXI_4 (.C(CLK), 
                                 .CE(XLXN_1), 
                                 .CLR(CLR), 
                                 .CEO(), 
                                 .Q0(Q1_1), 
                                 .Q1(Q1_2), 
                                 .Q2(Q1_3), 
                                 .Q3(Q1_4), 
                                 .TC(XLXN_4));
   (* HU_SET = "XLXI_5_1" *) 
   CD4CE_HXILINX_counter  XLXI_5 (.C(XLXN_4), 
                                 .CE(XLXN_1), 
                                 .CLR(CLR), 
                                 .CEO(), 
                                 .Q0(Q2_1), 
                                 .Q1(Q2_2), 
                                 .Q2(Q2_3), 
                                 .Q3(Q2_4), 
                                 .TC());
endmodule
