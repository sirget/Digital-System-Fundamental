////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 10/20/2019 22:23:17
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/AllLab/Lab6/main.vf -w C:/AllLab/Lab6/main.sch
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module COMP4_HXILINX_main (EQ, A0, A1, A2, A3, B0, B1, B2, B3);
    

   output EQ;

   input A0;
   input A1;
   input A2;
   input A3;
   input B0;
   input B1;
   input B2;
   input B3;

   assign EQ = ((A0==B0) && (A1==B1) && (A2==B2) && (A3==B3)) ;

endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_main (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 1ns / 1ps

module CLK_div5_MUSER_main(CLK, 
                           Q);

    input CLK;
   output Q;
   
   wire XLXN_4;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_14;
   wire XLXN_16;
   wire XLXN_17;
   wire Q_DUMMY;
   
   assign Q = Q_DUMMY;
   FDC  XLXI_1 (.C(CLK), 
               .CLR(XLXN_17), 
               .D(XLXN_8), 
               .Q(XLXN_16));
   FDC  XLXI_2 (.C(XLXN_8), 
               .CLR(XLXN_17), 
               .D(XLXN_9), 
               .Q(XLXN_4));
   FDC  XLXI_3 (.C(XLXN_9), 
               .CLR(XLXN_17), 
               .D(XLXN_14), 
               .Q(Q_DUMMY));
   INV  XLXI_4 (.I(XLXN_16), 
               .O(XLXN_8));
   INV  XLXI_5 (.I(XLXN_4), 
               .O(XLXN_9));
   INV  XLXI_6 (.I(Q_DUMMY), 
               .O(XLXN_14));
   AND2  XLXI_7 (.I0(Q_DUMMY), 
                .I1(XLXN_16), 
                .O(XLXN_17));
endmodule
`timescale 1ns / 1ps

module CLK_div2_MUSER_main(CLK, 
                           Q);

    input CLK;
   output Q;
   
   wire XLXN_2;
   wire Q_DUMMY;
   
   assign Q = Q_DUMMY;
   FD #( .INIT(1'b0) ) XLXI_1 (.C(CLK), 
              .D(XLXN_2), 
              .Q(Q_DUMMY));
   INV  XLXI_2 (.I(Q_DUMMY), 
               .O(XLXN_2));
endmodule
`timescale 1ns / 1ps

module CLK_div10_MUSER_main(CLK, 
                            CLK_out);

    input CLK;
   output CLK_out;
   
   wire XLXN_1;
   
   CLK_div2_MUSER_main  XLXI_1 (.CLK(CLK), 
                               .Q(XLXN_1));
   CLK_div5_MUSER_main  XLXI_2 (.CLK(XLXN_1), 
                               .Q(CLK_out));
endmodule
`timescale 1ns / 1ps

module CLK_divmain_MUSER_main(CLK, 
                              CLK_out);

    input CLK;
   output CLK_out;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   
   CLK_div10_MUSER_main  XLXI_2 (.CLK(CLK), 
                                .CLK_out(XLXN_2));
   CLK_div10_MUSER_main  XLXI_3 (.CLK(XLXN_2), 
                                .CLK_out(XLXN_3));
   CLK_div10_MUSER_main  XLXI_4 (.CLK(XLXN_3), 
                                .CLK_out(XLXN_4));
   CLK_div10_MUSER_main  XLXI_5 (.CLK(XLXN_4), 
                                .CLK_out(XLXN_5));
   CLK_div10_MUSER_main  XLXI_6 (.CLK(XLXN_5), 
                                .CLK_out(CLK_out));
endmodule
`timescale 1ns / 1ps

module bcd_to_7seg_MUSER_main(A, 
                              B, 
                              C, 
                              D, 
                              a_P41, 
                              b_P40, 
                              c_P35, 
                              d_P34, 
                              e_P32, 
                              f_P29, 
                              g_P27);

    input A;
    input B;
    input C;
    input D;
   output a_P41;
   output b_P40;
   output c_P35;
   output d_P34;
   output e_P32;
   output f_P29;
   output g_P27;
   
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   
   AND2  BbC (.I0(C), 
             .I1(XLXN_24), 
             .O(XLXN_32));
   AND2  BbDd (.I0(XLXN_35), 
              .I1(XLXN_24), 
              .O(XLXN_31));
   AND2  BCc (.I0(XLXN_28), 
             .I1(B), 
             .O(XLXN_37));
   AND2  BCcD (.I0(XLXN_37), 
              .I1(D), 
              .O(XLXN_33));
   AND2  BD (.I0(D), 
            .I1(B), 
            .O(XLXN_23));
   AND2  BDd (.I0(XLXN_35), 
             .I1(B), 
             .O(XLXN_36));
   AND2  CcDd (.I0(XLXN_35), 
              .I1(XLXN_28), 
              .O(XLXN_26));
   AND2  CD (.I0(D), 
            .I1(C), 
            .O(XLXN_27));
   AND2  CDd (.I0(XLXN_35), 
             .I1(C), 
             .O(XLXN_34));
   INV  XLXI_2 (.I(B), 
               .O(XLXN_24));
   INV  XLXI_3 (.I(C), 
               .O(XLXN_28));
   INV  XLXI_4 (.I(D), 
               .O(XLXN_35));
   OR4  XLXI_10 (.I0(XLXN_31), 
                .I1(XLXN_23), 
                .I2(C), 
                .I3(A), 
                .O(a_P41));
   OR3  XLXI_11 (.I0(D), 
                .I1(XLXN_28), 
                .I2(B), 
                .O(c_P35));
   OR3  XLXI_12 (.I0(XLXN_27), 
                .I1(XLXN_26), 
                .I2(XLXN_24), 
                .O(b_P40));
   OR4  XLXI_13 (.I0(XLXN_36), 
                .I1(XLXN_37), 
                .I2(XLXN_26), 
                .I3(A), 
                .O(f_P29));
   OR4  XLXI_14 (.I0(XLXN_34), 
                .I1(XLXN_32), 
                .I2(XLXN_37), 
                .I3(A), 
                .O(g_P27));
   OR2  XLXI_15 (.I0(XLXN_34), 
                .I1(XLXN_31), 
                .O(e_P32));
   OR5  XLXI_28 (.I0(XLXN_33), 
                .I1(A), 
                .I2(XLXN_32), 
                .I3(XLXN_34), 
                .I4(XLXN_31), 
                .O(d_P34));
endmodule
`timescale 1ns / 1ps

module counter_MUSER_main(CLK, 
                          CLR, 
                          Q1_1, 
                          Q1_2, 
                          Q1_3, 
                          Q1_4, 
                          Q2_1, 
                          Q2_2, 
                          Q2_3, 
                          Q2_4);

    input CLK;
    input CLR;
   output Q1_1;
   output Q1_2;
   output Q1_3;
   output Q1_4;
   output Q2_1;
   output Q2_2;
   output Q2_3;
   output Q2_4;
   
   wire XLXN_1;
   wire XLXN_4;
   
   VCC  XLXI_3 (.P(XLXN_1));
   (* HU_SET = "XLXI_4_2" *) 
   CD4CE_HXILINX_main  XLXI_4 (.C(CLK), 
                              .CE(XLXN_1), 
                              .CLR(CLR), 
                              .CEO(), 
                              .Q0(Q1_1), 
                              .Q1(Q1_2), 
                              .Q2(Q1_3), 
                              .Q3(Q1_4), 
                              .TC(XLXN_4));
   (* HU_SET = "XLXI_5_3" *) 
   CD4CE_HXILINX_main  XLXI_5 (.C(XLXN_4), 
                              .CE(XLXN_1), 
                              .CLR(CLR), 
                              .CEO(), 
                              .Q0(Q2_1), 
                              .Q1(Q2_2), 
                              .Q2(Q2_3), 
                              .Q3(Q2_4), 
                              .TC());
endmodule
`timescale 1ns / 1ps

module selective2bcd_MUSER_main(CLK, 
                                Q1_1, 
                                Q1_2, 
                                Q1_3, 
                                Q1_4, 
                                Q2_1, 
                                Q2_2, 
                                Q2_3, 
                                Q2_4, 
                                Q_1, 
                                Q_2, 
                                Q_3, 
                                Q_4);

    input CLK;
    input Q1_1;
    input Q1_2;
    input Q1_3;
    input Q1_4;
    input Q2_1;
    input Q2_2;
    input Q2_3;
    input Q2_4;
   output Q_1;
   output Q_2;
   output Q_3;
   output Q_4;
   
   
   (* HU_SET = "XLXI_1_4" *) 
   M2_1_HXILINX_main  XLXI_1 (.D0(Q1_1), 
                             .D1(Q2_1), 
                             .S0(CLK), 
                             .O(Q_1));
   (* HU_SET = "XLXI_2_5" *) 
   M2_1_HXILINX_main  XLXI_2 (.D0(Q1_2), 
                             .D1(Q2_2), 
                             .S0(CLK), 
                             .O(Q_2));
   (* HU_SET = "XLXI_3_6" *) 
   M2_1_HXILINX_main  XLXI_3 (.D0(Q1_3), 
                             .D1(Q2_3), 
                             .S0(CLK), 
                             .O(Q_3));
   (* HU_SET = "XLXI_4_7" *) 
   M2_1_HXILINX_main  XLXI_4 (.D0(Q1_4), 
                             .D1(Q2_4), 
                             .S0(CLK), 
                             .O(Q_4));
endmodule
`timescale 1ns / 1ps

module main(CLK, 
            In47, 
            a, 
            b, 
            Buzzer, 
            c, 
            common0, 
            common1, 
            d, 
            e, 
            f, 
            g);

   (* LOC = "P123" *) 
    input CLK;
   (* LOC = "P47" *) 
    input In47;
   (* LOC = "P41" *) 
   output a;
   (* LOC = "P40" *) 
   output b;
   (* LOC = "P83" *) 
   output Buzzer;
   (* LOC = "P35" *) 
   output c;
   (* LOC = "P44" *) 
   output common0;
   (* LOC = "P43" *) 
   output common1;
   (* LOC = "P34" *) 
   output d;
   (* LOC = "P32" *) 
   output e;
   (* LOC = "P29" *) 
   output f;
   (* LOC = "P27" *) 
   output g;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_26;
   wire XLXN_28;
   wire XLXN_35;
   wire common0_DUMMY;
   
   assign common0 = common0_DUMMY;
   selective2bcd_MUSER_main  XLXI_3 (.CLK(common0_DUMMY), 
                                    .Q1_1(XLXN_28), 
                                    .Q1_2(XLXN_6), 
                                    .Q1_3(XLXN_7), 
                                    .Q1_4(XLXN_8), 
                                    .Q2_1(XLXN_9), 
                                    .Q2_2(XLXN_10), 
                                    .Q2_3(XLXN_11), 
                                    .Q2_4(XLXN_12), 
                                    .Q_1(XLXN_1), 
                                    .Q_2(XLXN_2), 
                                    .Q_3(XLXN_3), 
                                    .Q_4(XLXN_4));
   counter_MUSER_main  XLXI_4 (.CLK(XLXN_35), 
                              .CLR(XLXN_26), 
                              .Q1_1(XLXN_28), 
                              .Q1_2(XLXN_6), 
                              .Q1_3(XLXN_7), 
                              .Q1_4(XLXN_8), 
                              .Q2_1(XLXN_9), 
                              .Q2_2(XLXN_10), 
                              .Q2_3(XLXN_11), 
                              .Q2_4(XLXN_12));
   GND  XLXI_5 (.G(XLXN_26));
   (* HU_SET = "XLXI_6_8" *) 
   COMP4_HXILINX_main  XLXI_6 (.A0(XLXN_28), 
                              .A1(XLXN_6), 
                              .A2(XLXN_7), 
                              .A3(XLXN_8), 
                              .B0(XLXN_9), 
                              .B1(XLXN_10), 
                              .B2(XLXN_11), 
                              .B3(XLXN_12), 
                              .EQ(Buzzer));
   AND2  XLXI_7 (.I0(In47), 
                .I1(common0_DUMMY), 
                .O(XLXN_35));
   INV  XLXI_8 (.I(common0_DUMMY), 
               .O(common1));
   bcd_to_7seg_MUSER_main  XLXI_12 (.A(XLXN_4), 
                                   .B(XLXN_3), 
                                   .C(XLXN_2), 
                                   .D(XLXN_1), 
                                   .a_P41(a), 
                                   .b_P40(b), 
                                   .c_P35(c), 
                                   .d_P34(d), 
                                   .e_P32(e), 
                                   .f_P29(f), 
                                   .g_P27(g));
   CLK_divmain_MUSER_main  XLXI_15 (.CLK(CLK), 
                                   .CLK_out(common0_DUMMY));
endmodule
