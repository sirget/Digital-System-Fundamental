////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : counter.vf
// /___/   /\     Timestamp : 10/24/2019 23:28:50
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/AllLab/Lab7/counter.vf -w C:/AllLab/Lab7/counter.sch
//Design Name: counter
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_counter(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module counter(clear, 
               CLK, 
               min1_0, 
               min1_1, 
               min1_2, 
               min1_3, 
               min2_0, 
               min2_1, 
               min2_2, 
               min2_3, 
               sec1_0, 
               sec1_1, 
               sec1_2, 
               sec1_3, 
               sec2_0, 
               sec2_1, 
               sec2_2, 
               sec2_3);

    input clear;
    input CLK;
   output min1_0;
   output min1_1;
   output min1_2;
   output min1_3;
   output min2_0;
   output min2_1;
   output min2_2;
   output min2_3;
   output sec1_0;
   output sec1_1;
   output sec1_2;
   output sec1_3;
   output sec2_0;
   output sec2_1;
   output sec2_2;
   output sec2_3;
   
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire sec2_1_DUMMY;
   wire sec2_2_DUMMY;
   
   assign sec2_1 = sec2_1_DUMMY;
   assign sec2_2 = sec2_2_DUMMY;
   (* HU_SET = "XLXI_9_12" *) 
   CD4CE_HXILINX_counter  XLXI_9 (.C(CLK), 
                                 .CE(XLXN_63), 
                                 .CLR(clear), 
                                 .CEO(XLXN_62), 
                                 .Q0(sec1_0), 
                                 .Q1(sec1_1), 
                                 .Q2(sec1_2), 
                                 .Q3(sec1_3), 
                                 .TC());
   (* HU_SET = "XLXI_10_13" *) 
   CD4CE_HXILINX_counter  XLXI_10 (.C(CLK), 
                                  .CE(XLXN_62), 
                                  .CLR(XLXN_58), 
                                  .CEO(), 
                                  .Q0(sec2_0), 
                                  .Q1(sec2_1_DUMMY), 
                                  .Q2(sec2_2_DUMMY), 
                                  .Q3(sec2_3), 
                                  .TC());
   (* HU_SET = "XLXI_11_14" *) 
   CD4CE_HXILINX_counter  XLXI_11 (.C(XLXN_57), 
                                  .CE(XLXN_63), 
                                  .CLR(clear), 
                                  .CEO(XLXN_64), 
                                  .Q0(min1_0), 
                                  .Q1(min1_1), 
                                  .Q2(min1_2), 
                                  .Q3(min1_3), 
                                  .TC());
   (* HU_SET = "XLXI_12_15" *) 
   CD4CE_HXILINX_counter  XLXI_12 (.C(XLXN_57), 
                                  .CE(XLXN_64), 
                                  .CLR(clear), 
                                  .CEO(), 
                                  .Q0(min2_0), 
                                  .Q1(min2_1), 
                                  .Q2(min2_2), 
                                  .Q3(min2_3), 
                                  .TC());
   VCC  XLXI_13 (.P(XLXN_63));
   AND2  XLXI_16 (.I0(sec2_2_DUMMY), 
                 .I1(sec2_1_DUMMY), 
                 .O(XLXN_57));
   OR2  XLXI_17 (.I0(XLXN_57), 
                .I1(clear), 
                .O(XLXN_58));
endmodule
