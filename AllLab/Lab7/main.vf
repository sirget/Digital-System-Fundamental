////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 10/24/2019 23:41:56
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/AllLab/Lab7/main.vf -w C:/AllLab/Lab7/main.sch
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module FTC_HXILINX_main(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module INV4_HXILINX_main (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_main (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_main (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_main(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module CLK_div5_MUSER_main(CLK, 
                           Q);

    input CLK;
   output Q;
   
   wire XLXN_4;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_14;
   wire XLXN_16;
   wire XLXN_17;
   wire Q_DUMMY;
   
   assign Q = Q_DUMMY;
   FDC  XLXI_1 (.C(CLK), 
               .CLR(XLXN_17), 
               .D(XLXN_8), 
               .Q(XLXN_16));
   FDC  XLXI_2 (.C(XLXN_8), 
               .CLR(XLXN_17), 
               .D(XLXN_9), 
               .Q(XLXN_4));
   FDC  XLXI_3 (.C(XLXN_9), 
               .CLR(XLXN_17), 
               .D(XLXN_14), 
               .Q(Q_DUMMY));
   INV  XLXI_4 (.I(XLXN_16), 
               .O(XLXN_8));
   INV  XLXI_5 (.I(XLXN_4), 
               .O(XLXN_9));
   INV  XLXI_6 (.I(Q_DUMMY), 
               .O(XLXN_14));
   AND2  XLXI_7 (.I0(Q_DUMMY), 
                .I1(XLXN_16), 
                .O(XLXN_17));
endmodule
`timescale 1ns / 1ps

module CLK_div2_MUSER_main(CLK, 
                           Q);

    input CLK;
   output Q;
   
   wire XLXN_2;
   wire Q_DUMMY;
   
   assign Q = Q_DUMMY;
   FD #( .INIT(1'b0) ) XLXI_1 (.C(CLK), 
              .D(XLXN_2), 
              .Q(Q_DUMMY));
   INV  XLXI_2 (.I(Q_DUMMY), 
               .O(XLXN_2));
endmodule
`timescale 1ns / 1ps

module CLK_div10_MUSER_main(CLK, 
                            Q);

    input CLK;
   output Q;
   
   wire XLXN_1;
   
   CLK_div2_MUSER_main  XLXI_1 (.CLK(CLK), 
                               .Q(XLXN_1));
   CLK_div5_MUSER_main  XLXI_2 (.CLK(XLXN_1), 
                               .Q(Q));
endmodule
`timescale 1ns / 1ps

module CLK_div20k_MUSER_main(CLK, 
                             Q);

    input CLK;
   output Q;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   
   CLK_div2_MUSER_main  XLXI_1 (.CLK(CLK), 
                               .Q(XLXN_1));
   CLK_div10_MUSER_main  XLXI_2 (.CLK(XLXN_1), 
                                .Q(XLXN_2));
   CLK_div10_MUSER_main  XLXI_3 (.CLK(XLXN_2), 
                                .Q(XLXN_3));
   CLK_div10_MUSER_main  XLXI_4 (.CLK(XLXN_3), 
                                .Q(XLXN_4));
   CLK_div10_MUSER_main  XLXI_5 (.CLK(XLXN_4), 
                                .Q(Q));
endmodule
`timescale 1ns / 1ps

module CLK_div20M_MUSER_main(CLK, 
                             Q);

    input CLK;
   output Q;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   
   CLK_div20k_MUSER_main  XLXI_1 (.CLK(CLK), 
                                 .Q(XLXN_1));
   CLK_div10_MUSER_main  XLXI_2 (.CLK(XLXN_1), 
                                .Q(XLXN_2));
   CLK_div10_MUSER_main  XLXI_3 (.CLK(XLXN_2), 
                                .Q(XLXN_3));
   CLK_div10_MUSER_main  XLXI_4 (.CLK(XLXN_3), 
                                .Q(Q));
endmodule
`timescale 1ns / 1ps

module CLK_divm_MUSER_main(CLK, 
                           State, 
                           CLK_counter, 
                           CLK_p, 
                           CLK_select);

    input CLK;
    input State;
   output CLK_counter;
   output CLK_p;
   output CLK_select;
   
   wire XLXN_1;
   
   AND2  XLXI_1 (.I0(State), 
                .I1(XLXN_1), 
                .O(CLK_counter));
   CLK_div20M_MUSER_main  XLXI_4 (.CLK(CLK), 
                                 .Q(XLXN_1));
   CLK_div20k_MUSER_main  XLXI_5 (.CLK(CLK), 
                                 .Q(CLK_select));
   CLK_div20M_MUSER_main  XLXI_6 (.CLK(CLK), 
                                 .Q(CLK_p));
endmodule
`timescale 1ns / 1ps

module counter_MUSER_main(clear, 
                          CLK, 
                          min1_0, 
                          min1_1, 
                          min1_2, 
                          min1_3, 
                          min2_0, 
                          min2_1, 
                          min2_2, 
                          min2_3, 
                          sec1_0, 
                          sec1_1, 
                          sec1_2, 
                          sec1_3, 
                          sec2_0, 
                          sec2_1, 
                          sec2_2, 
                          sec2_3);

    input clear;
    input CLK;
   output min1_0;
   output min1_1;
   output min1_2;
   output min1_3;
   output min2_0;
   output min2_1;
   output min2_2;
   output min2_3;
   output sec1_0;
   output sec1_1;
   output sec1_2;
   output sec1_3;
   output sec2_0;
   output sec2_1;
   output sec2_2;
   output sec2_3;
   
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire sec2_1_DUMMY;
   wire sec2_2_DUMMY;
   
   assign sec2_1 = sec2_1_DUMMY;
   assign sec2_2 = sec2_2_DUMMY;
   (* HU_SET = "XLXI_9_12" *) 
   CD4CE_HXILINX_main  XLXI_9 (.C(CLK), 
                              .CE(XLXN_63), 
                              .CLR(clear), 
                              .CEO(XLXN_62), 
                              .Q0(sec1_0), 
                              .Q1(sec1_1), 
                              .Q2(sec1_2), 
                              .Q3(sec1_3), 
                              .TC());
   (* HU_SET = "XLXI_10_13" *) 
   CD4CE_HXILINX_main  XLXI_10 (.C(CLK), 
                               .CE(XLXN_62), 
                               .CLR(XLXN_58), 
                               .CEO(), 
                               .Q0(sec2_0), 
                               .Q1(sec2_1_DUMMY), 
                               .Q2(sec2_2_DUMMY), 
                               .Q3(sec2_3), 
                               .TC());
   (* HU_SET = "XLXI_11_14" *) 
   CD4CE_HXILINX_main  XLXI_11 (.C(XLXN_57), 
                               .CE(XLXN_63), 
                               .CLR(clear), 
                               .CEO(XLXN_64), 
                               .Q0(min1_0), 
                               .Q1(min1_1), 
                               .Q2(min1_2), 
                               .Q3(min1_3), 
                               .TC());
   (* HU_SET = "XLXI_12_15" *) 
   CD4CE_HXILINX_main  XLXI_12 (.C(XLXN_57), 
                               .CE(XLXN_64), 
                               .CLR(clear), 
                               .CEO(), 
                               .Q0(min2_0), 
                               .Q1(min2_1), 
                               .Q2(min2_2), 
                               .Q3(min2_3), 
                               .TC());
   VCC  XLXI_13 (.P(XLXN_63));
   AND2  XLXI_16 (.I0(sec2_2_DUMMY), 
                 .I1(sec2_1_DUMMY), 
                 .O(XLXN_57));
   OR2  XLXI_17 (.I0(XLXN_57), 
                .I1(clear), 
                .O(XLXN_58));
endmodule
`timescale 1ns / 1ps

module Clear_MUSER_main(state, 
                        SW, 
                        clear);

    input state;
    input SW;
   output clear;
   
   wire XLXN_1;
   
   AND2  XLXI_1 (.I0(SW), 
                .I1(XLXN_1), 
                .O(clear));
   INV  XLXI_2 (.I(state), 
               .O(XLXN_1));
endmodule
`timescale 1ns / 1ps

module Selecter2bit_MUSER_main(CLK, 
                               CLK_p, 
                               com0, 
                               com1, 
                               com2, 
                               com3, 
                               P, 
                               S0, 
                               S1);

    input CLK;
    input CLK_p;
   output com0;
   output com1;
   output com2;
   output com3;
   output P;
   output S0;
   output S1;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_8;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_16;
   wire S0_DUMMY;
   wire S1_DUMMY;
   
   assign S0 = S0_DUMMY;
   assign S1 = S1_DUMMY;
   (* HU_SET = "XLXI_1_16" *) 
   CB2CE_HXILINX_main  XLXI_1 (.C(CLK), 
                              .CE(XLXN_3), 
                              .CLR(XLXN_2), 
                              .CEO(), 
                              .Q0(S0_DUMMY), 
                              .Q1(S1_DUMMY), 
                              .TC());
   (* HU_SET = "XLXI_2_17" *) 
   D2_4E_HXILINX_main  XLXI_2 (.A0(S0_DUMMY), 
                              .A1(S1_DUMMY), 
                              .E(XLXN_3), 
                              .D0(XLXN_11), 
                              .D1(XLXN_10), 
                              .D2(XLXN_16), 
                              .D3(XLXN_8));
   GND  XLXI_3 (.G(XLXN_2));
   VCC  XLXI_4 (.P(XLXN_3));
   AND2  XLXI_8 (.I0(CLK_p), 
                .I1(XLXN_16), 
                .O(P));
   (* HU_SET = "XLXI_9_18" *) 
   INV4_HXILINX_main  XLXI_9 (.I0(XLXN_8), 
                             .I1(XLXN_16), 
                             .I2(XLXN_10), 
                             .I3(XLXN_11), 
                             .O0(com3), 
                             .O1(com2), 
                             .O2(com1), 
                             .O3(com0));
endmodule
`timescale 1ns / 1ps

module State_MUSER_main(SW, 
                        state);

    input SW;
   output state;
   
   wire XLXN_14;
   wire XLXN_16;
   
   (* HU_SET = "XLXI_3_19" *) 
   FTC_HXILINX_main  XLXI_3 (.C(SW), 
                            .CLR(XLXN_14), 
                            .T(XLXN_16), 
                            .Q(state));
   GND  XLXI_4 (.G(XLXN_14));
   VCC  XLXI_5 (.P(XLXN_16));
endmodule
`timescale 1ns / 1ps

module Mux4_1_MUSER_main(min1_0, 
                         min1_1, 
                         min1_2, 
                         min1_3, 
                         min2_0, 
                         min2_1, 
                         min2_2, 
                         min2_3, 
                         sec1_0, 
                         sec1_1, 
                         sec1_2, 
                         sec1_3, 
                         sec2_0, 
                         sec2_1, 
                         sec2_2, 
                         sec2_3, 
                         S0, 
                         S1, 
                         Q0, 
                         Q1, 
                         Q2, 
                         Q3);

    input min1_0;
    input min1_1;
    input min1_2;
    input min1_3;
    input min2_0;
    input min2_1;
    input min2_2;
    input min2_3;
    input sec1_0;
    input sec1_1;
    input sec1_2;
    input sec1_3;
    input sec2_0;
    input sec2_1;
    input sec2_2;
    input sec2_3;
    input S0;
    input S1;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   
   wire XLXN_33;
   
   (* HU_SET = "XLXI_1_20" *) 
   M4_1E_HXILINX_main  XLXI_1 (.D0(sec1_0), 
                              .D1(sec2_0), 
                              .D2(min1_0), 
                              .D3(min2_0), 
                              .E(XLXN_33), 
                              .S0(S0), 
                              .S1(S1), 
                              .O(Q0));
   (* HU_SET = "XLXI_2_21" *) 
   M4_1E_HXILINX_main  XLXI_2 (.D0(sec1_1), 
                              .D1(sec2_1), 
                              .D2(min1_1), 
                              .D3(min2_1), 
                              .E(XLXN_33), 
                              .S0(S0), 
                              .S1(S1), 
                              .O(Q1));
   (* HU_SET = "XLXI_3_22" *) 
   M4_1E_HXILINX_main  XLXI_3 (.D0(sec1_2), 
                              .D1(sec2_2), 
                              .D2(min1_2), 
                              .D3(min2_2), 
                              .E(XLXN_33), 
                              .S0(S0), 
                              .S1(S1), 
                              .O(Q2));
   (* HU_SET = "XLXI_4_23" *) 
   M4_1E_HXILINX_main  XLXI_4 (.D0(sec1_3), 
                              .D1(sec2_3), 
                              .D2(min1_3), 
                              .D3(min2_3), 
                              .E(XLXN_33), 
                              .S0(S0), 
                              .S1(S1), 
                              .O(Q3));
   VCC  XLXI_5 (.P(XLXN_33));
endmodule
`timescale 1ns / 1ps

module bcd_to_7seg_MUSER_main(A, 
                              B, 
                              C, 
                              D, 
                              a_P41, 
                              b_P40, 
                              c_P35, 
                              d_P34, 
                              e_P32, 
                              f_P29, 
                              g_P27);

    input A;
    input B;
    input C;
    input D;
   output a_P41;
   output b_P40;
   output c_P35;
   output d_P34;
   output e_P32;
   output f_P29;
   output g_P27;
   
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   
   AND2  BbC (.I0(C), 
             .I1(XLXN_24), 
             .O(XLXN_32));
   AND2  BbDd (.I0(XLXN_35), 
              .I1(XLXN_24), 
              .O(XLXN_31));
   AND2  BCc (.I0(XLXN_28), 
             .I1(B), 
             .O(XLXN_37));
   AND2  BCcD (.I0(XLXN_37), 
              .I1(D), 
              .O(XLXN_33));
   AND2  BD (.I0(D), 
            .I1(B), 
            .O(XLXN_23));
   AND2  BDd (.I0(XLXN_35), 
             .I1(B), 
             .O(XLXN_36));
   AND2  CcDd (.I0(XLXN_35), 
              .I1(XLXN_28), 
              .O(XLXN_26));
   AND2  CD (.I0(D), 
            .I1(C), 
            .O(XLXN_27));
   AND2  CDd (.I0(XLXN_35), 
             .I1(C), 
             .O(XLXN_34));
   INV  XLXI_2 (.I(B), 
               .O(XLXN_24));
   INV  XLXI_3 (.I(C), 
               .O(XLXN_28));
   INV  XLXI_4 (.I(D), 
               .O(XLXN_35));
   OR4  XLXI_10 (.I0(XLXN_31), 
                .I1(XLXN_23), 
                .I2(C), 
                .I3(A), 
                .O(a_P41));
   OR3  XLXI_11 (.I0(D), 
                .I1(XLXN_28), 
                .I2(B), 
                .O(c_P35));
   OR3  XLXI_12 (.I0(XLXN_27), 
                .I1(XLXN_26), 
                .I2(XLXN_24), 
                .O(b_P40));
   OR4  XLXI_13 (.I0(XLXN_36), 
                .I1(XLXN_37), 
                .I2(XLXN_26), 
                .I3(A), 
                .O(f_P29));
   OR4  XLXI_14 (.I0(XLXN_34), 
                .I1(XLXN_32), 
                .I2(XLXN_37), 
                .I3(A), 
                .O(g_P27));
   OR2  XLXI_15 (.I0(XLXN_34), 
                .I1(XLXN_31), 
                .O(e_P32));
   OR5  XLXI_28 (.I0(XLXN_33), 
                .I1(A), 
                .I2(XLXN_32), 
                .I3(XLXN_34), 
                .I4(XLXN_31), 
                .O(d_P34));
endmodule
`timescale 1ns / 1ps

module main(CLK_ocs, 
            SW_clr, 
            SW_state, 
            a, 
            b, 
            c, 
            common0, 
            common1, 
            common2, 
            common3, 
            d, 
            e, 
            f, 
            g, 
            p);

   (* LOC = "P123" *) 
    input CLK_ocs;
   (* LOC = "P48" *) 
    input SW_clr;
   (* LOC = "P51" *) 
    input SW_state;
   (* LOC = "P41" *) 
   output a;
   (* LOC = "P40" *) 
   output b;
   (* LOC = "P35" *) 
   output c;
   (* LOC = "P44" *) 
   output common0;
   (* LOC = "P43" *) 
   output common1;
   (* LOC = "P33" *) 
   output common2;
   (* LOC = "P30" *) 
   output common3;
   (* LOC = "P34" *) 
   output d;
   (* LOC = "P32" *) 
   output e;
   (* LOC = "P29" *) 
   output f;
   (* LOC = "P27" *) 
   output g;
   (* LOC = "P26" *) 
   output p;
   
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_31;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_56;
   wire XLXN_60;
   wire XLXN_62;
   wire XLXN_65;
   wire XLXN_68;
   
   bcd_to_7seg_MUSER_main  XLXI_7 (.A(XLXN_33), 
                                  .B(XLXN_31), 
                                  .C(XLXN_30), 
                                  .D(XLXN_29), 
                                  .a_P41(a), 
                                  .b_P40(b), 
                                  .c_P35(c), 
                                  .d_P34(d), 
                                  .e_P32(e), 
                                  .f_P29(f), 
                                  .g_P27(g));
   Mux4_1_MUSER_main  XLXI_8 (.min1_0(XLXN_21), 
                             .min1_1(XLXN_22), 
                             .min1_2(XLXN_23), 
                             .min1_3(XLXN_24), 
                             .min2_0(XLXN_25), 
                             .min2_1(XLXN_26), 
                             .min2_2(XLXN_27), 
                             .min2_3(XLXN_28), 
                             .sec1_0(XLXN_17), 
                             .sec1_1(XLXN_18), 
                             .sec1_2(XLXN_19), 
                             .sec1_3(XLXN_20), 
                             .sec2_0(XLXN_13), 
                             .sec2_1(XLXN_14), 
                             .sec2_2(XLXN_15), 
                             .sec2_3(XLXN_16), 
                             .S0(XLXN_34), 
                             .S1(XLXN_35), 
                             .Q0(XLXN_29), 
                             .Q1(XLXN_30), 
                             .Q2(XLXN_31), 
                             .Q3(XLXN_33));
   State_MUSER_main  XLXI_12 (.SW(SW_state), 
                             .state(XLXN_62));
   Selecter2bit_MUSER_main  XLXI_13 (.CLK(XLXN_56), 
                                    .CLK_p(XLXN_68), 
                                    .com0(common0), 
                                    .com1(common1), 
                                    .com2(common2), 
                                    .com3(common3), 
                                    .P(p), 
                                    .S0(XLXN_34), 
                                    .S1(XLXN_35));
   Clear_MUSER_main  XLXI_17 (.state(XLXN_62), 
                             .SW(SW_clr), 
                             .clear(XLXN_60));
   counter_MUSER_main  XLXI_20 (.clear(XLXN_60), 
                               .CLK(XLXN_65), 
                               .min1_0(XLXN_21), 
                               .min1_1(XLXN_22), 
                               .min1_2(XLXN_23), 
                               .min1_3(XLXN_24), 
                               .min2_0(XLXN_25), 
                               .min2_1(XLXN_26), 
                               .min2_2(XLXN_27), 
                               .min2_3(XLXN_28), 
                               .sec1_0(XLXN_17), 
                               .sec1_1(XLXN_18), 
                               .sec1_2(XLXN_19), 
                               .sec1_3(XLXN_20), 
                               .sec2_0(XLXN_13), 
                               .sec2_1(XLXN_14), 
                               .sec2_2(XLXN_15), 
                               .sec2_3(XLXN_16));
   CLK_divm_MUSER_main  XLXI_21 (.CLK(CLK_ocs), 
                                .State(XLXN_62), 
                                .CLK_counter(XLXN_65), 
                                .CLK_p(XLXN_68), 
                                .CLK_select(XLXN_56));
endmodule
