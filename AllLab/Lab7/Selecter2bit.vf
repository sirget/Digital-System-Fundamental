////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Selecter2bit.vf
// /___/   /\     Timestamp : 10/24/2019 22:41:03
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/AllLab/Lab7/Selecter2bit.vf -w C:/AllLab/Lab7/Selecter2bit.sch
//Design Name: Selecter2bit
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module INV4_HXILINX_Selecter2bit (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_Selecter2bit (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_Selecter2bit(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Selecter2bit(CLK, 
                    CLK_p, 
                    com0, 
                    com1, 
                    com2, 
                    com3, 
                    P, 
                    S0, 
                    S1);

    input CLK;
    input CLK_p;
   output com0;
   output com1;
   output com2;
   output com3;
   output P;
   output S0;
   output S1;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_8;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_16;
   wire S0_DUMMY;
   wire S1_DUMMY;
   
   assign S0 = S0_DUMMY;
   assign S1 = S1_DUMMY;
   (* HU_SET = "XLXI_1_21" *) 
   CB2CE_HXILINX_Selecter2bit  XLXI_1 (.C(CLK), 
                                      .CE(XLXN_3), 
                                      .CLR(XLXN_2), 
                                      .CEO(), 
                                      .Q0(S0_DUMMY), 
                                      .Q1(S1_DUMMY), 
                                      .TC());
   (* HU_SET = "XLXI_2_22" *) 
   D2_4E_HXILINX_Selecter2bit  XLXI_2 (.A0(S0_DUMMY), 
                                      .A1(S1_DUMMY), 
                                      .E(XLXN_3), 
                                      .D0(XLXN_11), 
                                      .D1(XLXN_10), 
                                      .D2(XLXN_16), 
                                      .D3(XLXN_8));
   GND  XLXI_3 (.G(XLXN_2));
   VCC  XLXI_4 (.P(XLXN_3));
   AND2  XLXI_8 (.I0(CLK_p), 
                .I1(XLXN_16), 
                .O(P));
   (* HU_SET = "XLXI_9_23" *) 
   INV4_HXILINX_Selecter2bit  XLXI_9 (.I0(XLXN_8), 
                                     .I1(XLXN_16), 
                                     .I2(XLXN_10), 
                                     .I3(XLXN_11), 
                                     .O0(com3), 
                                     .O1(com2), 
                                     .O2(com1), 
                                     .O3(com0));
endmodule
